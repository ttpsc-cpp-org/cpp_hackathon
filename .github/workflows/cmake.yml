name: CMake

on:
  push:
    branches: 
      - "master"
      - "team/**"
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.5
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10' # Version range or exact version of a Python version to use, using SemVer's version range syntax
        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
    - name: Pip Installer
      # You may pin to the exact commit or the version.
      # uses: BSFishy/pip-action@8f2d471d809dc20b6ada98c91910b6ae6243f318
      uses: BSFishy/pip-action@v1
      with:
        # The packages to install from Pip
        # For sake of an example, we picked tornado
        packages: tornado
    - uses: actions/checkout@v4.1.5
      with:
        repository: kexcpedti/cpp_hackathon_tests
        path: tests
        ref: main
        token: ${{ secrets.TEST_ACCESS_TOKEN }}
    
    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 2.3

    - name: Setup LCOV
      uses: hrishikesh-kadam/setup-lcov@v1

    # conan profile command has changed in version 2. "conan profile new" does not work anymore.
    - name: Configure conan
      run: |
        conan profile new default --detect
        conan profile update settings.compiler.libcxx=libstdc++11 default
        conan install ${{github.workspace}}
    - name: Configure webserver
      # TODO: We've picked tornado. Replace if needed.
      run: |
        python -m pip install --upgrade pip
        pip install tornado
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCI_CD_COVERAGE=ON

    - name: Build program
      id: build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target PWServerExe

    - name: Install
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install
    - name: Setup HTTP server
      id: setup_http_server
      working-directory: ${{github.workspace}}/server
      run: |
        echo ""
    - name: Run unit tests
      if: always() || steps.install.outcome == 'success'
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run:  cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target ctest_coverage
    - name: Generate a code coverage report
      uses: threeal/gcovr-action@v1.0.0
      with:
        excludes: |
          PWTests/*
          server/tests/*
        fail-under-line: 75%
    - name: Determine complexity.
      if: always() || steps.build.outcome == 'success'
      id: scc
      uses: hdmsantander/scc-docker-action@3.0
      with:
        args: ${{ env.workspace }} PWServer --ci
    - name: Run CSV file tests
      if: always() || steps.install.outcome == 'success'
      working-directory: ${{github.workspace}}/tests/src
      env:
        EXE_LOCATION: ${{github.workspace}}/install/PWServerExe
        JSON_LOCATION: ${{github.workspace}}/tests/test.json
      run:
        python -m unittest -v -b
    - name: Run HTTP tests
      if: always() || steps.setup_http_server.outcome == 'success'
      working-directory: ${{github.workspace}}/server
      run:
        python -m tornado.test.runtests tests
